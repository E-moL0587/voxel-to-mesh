@{ ViewData["Title"] = "Voxel"; }

<section>
  <h3>@ViewData["Title"]</h3>
  <a asp-action="Index">Index</a>
  <canvas id="myCanvas"></canvas>

  <h4>Voxel Data</h4>
  <pre>@ViewData["VoxelData"]</pre>
</section>

<script src="https://unpkg.com/three@0.142.0/build/three.min.js"></script>
<script src="https://unpkg.com/three@0.142.0/examples/js/controls/OrbitControls.js"></script>

<script>
  const w = 400, h = 300;
  const r = new THREE.WebGLRenderer({ canvas: document.querySelector('#myCanvas') });
  r.setSize(w, h);

  const s = new THREE.Scene();
  const c = new THREE.PerspectiveCamera(45, w / h, 1, 10000);
  c.position.set(0, 0, 30);

  const controls = new THREE.OrbitControls(c, r.domElement);
  s.add(new THREE.AmbientLight(0x404040));
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(5, 10, 7.5).normalize();
  s.add(light);

  const data = @Html.Raw(ViewData["VoxelData"]);
  const centroid = data.reduce((acc, [x, y, z]) => {
    acc.x += x; acc.y += y; acc.z += z;
    return acc;
  }, { x: 0, y: 0, z: 0 });

  centroid.x /= data.length;
  centroid.y /= data.length;
  centroid.z /= data.length;

  data.forEach(([x, y, z]) => {
    const mesh = new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1), 
      new THREE.MeshPhongMaterial({ color: 0xff00ff })
    );
    mesh.position.set(-(x - centroid.x), -(y - centroid.y), -(z - centroid.z));
    s.add(mesh);
  });

  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    r.render(s, c);
  }

  animate();
</script>
